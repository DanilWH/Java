/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eleqstory_db;

import java.sql.Connection;
import java.sql.DriverManager;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import java.util.logging.Level;
import javax.swing.ImageIcon;
import java.awt.Image;
import javax.swing.JFileChooser;
import java.io.File;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.logging.Logger;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author danil
 */
public class Main_Window extends javax.swing.JFrame {
    
    public String imgPath = null;
    public int position = 0;

    /**
     * Creates new form Main_Window
     */
    public Main_Window() {
        initComponents();
        // show data in the jtable.
        showProductsList();
    }
    
    /*** the own code. ***/
    
    private Connection getConnection() {
        /*** Returns the Connection object or null if there is no connection with the database. ***/
        
        // the data for getting the database connection.
        String url = "jdbc:mysql://localhost/products_db2";
        String username = "root";
        String password = "";
        // declare the Connection variable and initialize it to null.
        Connection con = null;
        try {
            // get the connection with the local database.
            con = DriverManager.getConnection(url, username, password);
        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(Level.SEVERE, null, ex);
            // show the other window with the "Not connected" label if there was no connection.
            JOptionPane.showMessageDialog(null, "Not connected!", "Something has gone wrond!", HEIGHT);
        } finally {
            // return the status of the connection as a result.
            return con;
        }
    }
    
    private ImageIcon resizeImg(String imagePath, byte[] pic) {
        /*** gets an image using its path and returns the resized copy of the image for the lbl_image label. ***/
        
        // declare the variable that will conteins the original image. But now it's null.
        ImageIcon myImage = null;
        
        // check if we have the path we could get the image with.
        if (imagePath != null) {
            // if so, get the image using the path.
            myImage = new ImageIcon(imagePath);
        }
        else {
            myImage = new ImageIcon(pic);
        }
        
        // resize the image to the lbl_image label size using an instance of the Image class.
        Image img = myImage.getImage();
        Image img2 = img.getScaledInstance(lbl_image.getWidth(), lbl_image.getHeight(), Image.SCALE_SMOOTH);
        
        // get the new scaled image and store it as an icon.
        ImageIcon image = new ImageIcon(img2);
        
        return image;
    }
    
    private boolean checkInputs() {
        /*** checks if the all fields aren't empty. ***/    
        
        if (txt_name.getText().isEmpty() || txt_price.getText().isEmpty() || txt_addDate.getText().isEmpty()) {
            return false;
        }
        else {
            try {
                // try to convert the price to a float value and return true if success.
                Float.parseFloat(txt_price.getText());
                return true;
            }
            catch (Exception ex) {
                return false;
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_id = new javax.swing.JTextField();
        txt_name = new javax.swing.JTextField();
        txt_price = new javax.swing.JTextField();
        txt_addDate = new javax.swing.JTextField();
        lbl_image = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_Products = new javax.swing.JTable();
        btn_Insert = new javax.swing.JButton();
        btn_ChooseImage = new javax.swing.JButton();
        btn_Update = new javax.swing.JButton();
        btn_Remove = new javax.swing.JButton();
        btn_First = new javax.swing.JButton();
        btn_Previous = new javax.swing.JButton();
        btn_Next = new javax.swing.JButton();
        btn_Last = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        btn_ClearFields = new javax.swing.JButton();
        btn_RefreshTable = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(java.awt.Color.white);

        jLabel1.setForeground(new java.awt.Color(1, 1, 1));
        jLabel1.setText("ID:");

        jLabel2.setForeground(new java.awt.Color(1, 1, 1));
        jLabel2.setText("Name:");

        jLabel3.setForeground(new java.awt.Color(1, 1, 1));
        jLabel3.setText("Price:");

        jLabel4.setForeground(new java.awt.Color(1, 1, 1));
        jLabel4.setText("Add Date:");

        jLabel5.setForeground(new java.awt.Color(1, 1, 1));
        jLabel5.setText("Image:");

        txt_id.setBackground(java.awt.Color.white);
        txt_id.setOpaque(false);
        txt_id.setPreferredSize(new java.awt.Dimension(15, 50));

        txt_name.setOpaque(false);
        txt_name.setPreferredSize(new java.awt.Dimension(15, 50));

        txt_price.setOpaque(false);
        txt_price.setPreferredSize(new java.awt.Dimension(15, 50));

        txt_addDate.setText("yyyy/MM/dd");
        txt_addDate.setOpaque(false);
        txt_addDate.setPreferredSize(new java.awt.Dimension(15, 50));

        lbl_image.setBackground(new java.awt.Color(230, 230, 230));
        lbl_image.setForeground(new java.awt.Color(1, 1, 1));
        lbl_image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_image.setText("No image yet");
        lbl_image.setToolTipText("");
        lbl_image.setOpaque(true);

        table_Products.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Price", "Add Date"
            }
        ));
        table_Products.setOpaque(false);
        table_Products.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_ProductsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_Products);

        btn_Insert.setBackground(new java.awt.Color(193, 193, 193));
        btn_Insert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/scaled/add-smaller.png"))); // NOI18N
        btn_Insert.setText("Insert");
        btn_Insert.setIconTextGap(5);
        btn_Insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_InsertActionPerformed(evt);
            }
        });

        btn_ChooseImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/scaled/download-smaller.png"))); // NOI18N
        btn_ChooseImage.setText("Add Image");
        btn_ChooseImage.setIconTextGap(10);
        btn_ChooseImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ChooseImageActionPerformed(evt);
            }
        });

        btn_Update.setBackground(new java.awt.Color(193, 193, 193));
        btn_Update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/scaled/reload-smaller.png"))); // NOI18N
        btn_Update.setText("Update");
        btn_Update.setIconTextGap(5);
        btn_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_UpdateActionPerformed(evt);
            }
        });

        btn_Remove.setBackground(new java.awt.Color(193, 193, 193));
        btn_Remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/scaled/criss-cross-smaller.png"))); // NOI18N
        btn_Remove.setText("Remove");
        btn_Remove.setIconTextGap(5);
        btn_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RemoveActionPerformed(evt);
            }
        });

        btn_First.setBackground(new java.awt.Color(193, 193, 193));
        btn_First.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/scaled/left-arrow.png"))); // NOI18N
        btn_First.setText("First");
        btn_First.setIconTextGap(5);
        btn_First.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_FirstActionPerformed(evt);
            }
        });

        btn_Previous.setBackground(new java.awt.Color(193, 193, 193));
        btn_Previous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/scaled/previous.png"))); // NOI18N
        btn_Previous.setText("Previous");
        btn_Previous.setIconTextGap(5);
        btn_Previous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PreviousActionPerformed(evt);
            }
        });

        btn_Next.setBackground(new java.awt.Color(193, 193, 193));
        btn_Next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/scaled/next.png"))); // NOI18N
        btn_Next.setText("Next");
        btn_Next.setIconTextGap(5);
        btn_Next.setMaximumSize(new java.awt.Dimension(104, 38));
        btn_Next.setMinimumSize(new java.awt.Dimension(104, 38));
        btn_Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_NextActionPerformed(evt);
            }
        });

        btn_Last.setBackground(new java.awt.Color(193, 193, 193));
        btn_Last.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/scaled/right-arrow.png"))); // NOI18N
        btn_Last.setText("Last");
        btn_Last.setIconTextGap(5);
        btn_Last.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_LastActionPerformed(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(1, 1, 1));
        jLabel6.setText("$");

        btn_ClearFields.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/scaled/eraser.png"))); // NOI18N
        btn_ClearFields.setText("Clear Fields");
        btn_ClearFields.setIconTextGap(5);
        btn_ClearFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ClearFieldsActionPerformed(evt);
            }
        });

        btn_RefreshTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/scaled/refresh.png"))); // NOI18N
        btn_RefreshTable.setText("Refresh Table");
        btn_RefreshTable.setIconTextGap(5);
        btn_RefreshTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RefreshTableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(50, 50, 50)
                                        .addComponent(jLabel1))
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_id, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_addDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btn_ChooseImage))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(txt_price, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 22, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btn_Insert)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_Update)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_Remove))
                            .addComponent(btn_ClearFields, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_RefreshTable)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_First)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Previous)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Next, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Last))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 678, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(txt_price, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txt_addDate, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(btn_ChooseImage, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_image, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_Insert)
                            .addComponent(btn_Update)
                            .addComponent(btn_Remove)
                            .addComponent(btn_RefreshTable))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_ClearFields))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_First)
                            .addComponent(btn_Previous)
                            .addComponent(btn_Next, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_Last))))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_ClearFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ClearFieldsActionPerformed
        /*** Just clears the fields. ***/
        txt_id.setText("");
        txt_name.setText("");
        txt_price.setText("");
        txt_addDate.setText("");
        lbl_image.setIcon(null);
        lbl_image.setText("...No image yet...");
    }//GEN-LAST:event_btn_ClearFieldsActionPerformed

    private void btn_LastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_LastActionPerformed
        /*** shows the latest element in the table of the database. ***/
        position = table_Products.getRowCount() - 1;
        // select the row where the user is on right now.
        table_Products.setRowSelectionInterval(position, position);
        this.showItem(position);
    }//GEN-LAST:event_btn_LastActionPerformed

    private void btn_NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_NextActionPerformed
        /*** Shows the user the next row of the table. ***/
        position = (position < table_Products.getRowCount() - 1)? position + 1 : 0;
        // select the row where the user is on right now.
        table_Products.setRowSelectionInterval(position, position);
        showItem(position);
    }//GEN-LAST:event_btn_NextActionPerformed

    private void btn_PreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PreviousActionPerformed
        /*** Shows the user the previous row of the table. ***/
        position = (position > 0)? position - 1 : table_Products.getRowCount() - 1;
        // select the row where the user is on right now.
        table_Products.setRowSelectionInterval(position, position);
        showItem(position);
    }//GEN-LAST:event_btn_PreviousActionPerformed

    private void btn_FirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_FirstActionPerformed
        /*** shows the first element in the table of the database. ***/
        position = 0;
        // select the row where the user is on right now.
        table_Products.setRowSelectionInterval(position, position);
        this.showItem(position);
    }//GEN-LAST:event_btn_FirstActionPerformed

    private void btn_RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RemoveActionPerformed
        /*** Removes an entry from the database, if any. ***/

        // check the correctness of the "ID" field.
        if (!isIDCorrect()) return;
        String id = txt_id.getText();

        // get a connection with the database.
        Connection con = getConnection();

        try {
            String query = "DELETE FROM products WHERE id = ?";
            PreparedStatement ps = con.prepareStatement(query);

            try {
                // the the id.
                ps.setInt(1, Integer.parseInt(id));
                // execute the query.
                ps.executeUpdate();

                // show the changes in the jtable.
                showProductsList();

                // confirm success.
                JOptionPane.showMessageDialog(null, "The entry with id = " + id + " has been successfully removed.");
            }
            finally {
                // close the statement.
                try {ps.close();} catch (Exception ex) {}
            }
        }
        catch (Exception ex) {
            // catch exception of the prepared statement connection.
            JOptionPane.showMessageDialog(null, ex);
        }
        finally {
            // close the database connection.
            try {con.close();} catch (SQLException ex) {}
        }
    }//GEN-LAST:event_btn_RemoveActionPerformed

    private void btn_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_UpdateActionPerformed
        /*** The Update button work implementation. ***/

        if (!isIDCorrect()) return;

        String id = txt_id.getText();

        String query = "UPDATE products SET name = ?, price = ?, add_date = ?, image = ? WHERE id = " + id;
        boolean success = this.processQuery(query);
        // show the changes in the jtable.
        showProductsList();
        // confirm success.
        if (success) JOptionPane.showMessageDialog(null, "The data has been successfully updated!");
    }//GEN-LAST:event_btn_UpdateActionPerformed

    private void btn_ChooseImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ChooseImageActionPerformed
        /*** allows to choose an image using the file chooser and sets the image as an icon into the lbl_image label. ***/

        // set the primordial directory as user/home.
        JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));

        // allow to use the jpg and png formats only.
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images", "jpg", "png");
        file.addChoosableFileFilter(filter);

        // get the result of the user has chosen an image.
        int result = file.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            // if so, get the selected file.
            File selectedFile = file.getSelectedFile();
            // get the absolute path of the selected file.
            String path = imgPath = selectedFile.getAbsolutePath();
            // clear the label text.
            lbl_image.setText("");
            // set the image as an icon of the lbl_image.label.
            lbl_image.setIcon(resizeImg(path, null));
        }
        // if the user has not chosen an image.
        else {
            // then we just print the message that says "No File Selected".
            System.out.println("No File Selected");
        }
    }//GEN-LAST:event_btn_ChooseImageActionPerformed

    private void btn_InsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_InsertActionPerformed
        // prepare the statement.
        String query = "INSERT INTO products (name, price, add_date, image) VALUES (?, ?, ?, ?)";
        boolean success = this.processQuery(query);
        if (success) JOptionPane.showMessageDialog(null, "The data has been successfully added!");
    }//GEN-LAST:event_btn_InsertActionPerformed

    private void table_ProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_ProductsMouseClicked
        position = table_Products.getSelectedRow();
        this.showItem(position);
    }//GEN-LAST:event_table_ProductsMouseClicked

    private void btn_RefreshTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RefreshTableActionPerformed
        /*** Refreshes the table of data. ***/
        this.showProductsList();
    }//GEN-LAST:event_btn_RefreshTableActionPerformed
    
    private boolean processQuery(String query) {
        /*** processes a query to the database. 
         * At first, we try to get all connections, streams, etc. and only then
         * we process all the rest operations for the query.
         * The following pattern of nested try-catch-finally statements allows us
         * to keep track of each connection or stream we try to get.
        ***/
        
        boolean success = false;
        
        if (checkInputs() && imgPath != null) {
            
            // get a connection with the database.
            Connection con = getConnection();
            
            try {
                PreparedStatement ps = con.prepareStatement(query);
                
                try {
                    // get a stream of the image and set it into the database.
                    InputStream img = new FileInputStream(new File(imgPath));
                    
                    try {
                        /* process the query.*/
                        
                        // set the name.
                        ps.setString(1, txt_name.getText());
                        // set the price.
                        ps.setString(2, txt_price.getText());
                        // set the added date.
                        ps.setString(3, txt_addDate.getText());
                        // set the image.
                        ps.setBlob(4, img);
                
                        // execute the query.
                        ps.executeUpdate();
                        
                        // show the jtable with the new row.
                        showProductsList();
                
                        success = true;
                        
                    }
                    finally {
                        // close the stream of img.
                        try {img.close();} catch (Exception ex) {}
                    }
                }
                catch (Exception ex) {
                    // catch an exception of getting the image stream.
                    JOptionPane.showMessageDialog(null, "The image size is too large. Please, choose a smaller image size.\n"
                            + "(The size of the image must be up to 1 Mb!)");
                }
                finally {
                    // close the connection of the prepared statement.
                    try {ps.close();} catch (SQLException ex) {}
                }
            }
            catch (Exception ex) {
                // catch exception of the prepared statement connection.
                JOptionPane.showMessageDialog(null, ex);
            }
            finally {
                // close the connection.
                try {con.close();} finally {return success;}
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "One or more fields are empty!");
        }
        
        return success;
    }
            
    private void showItem(int index) {
        /*** fills the fields with an item information depending on the parameter "index". ***/
        
        // get the ArrayList of products.
        Product prItem = getProductsList().get(index);
        
        // set the fields with the indexed item information.
        txt_id.setText(Integer.toString(prItem.getId()));
        txt_name.setText(prItem.getName());
        txt_price.setText(Float.toString(prItem.getPrice()));
        txt_addDate.setText(prItem.getAddDate());
        // clear the "image" label before set a new image.
        lbl_image.setText("");
        lbl_image.setIcon(resizeImg(null, prItem.getImage()));
    }
        
    private boolean isIDCorrect() {
        /*** checks if the id is correct. ***/
        
        String id = txt_id.getText();
        
        if (id.isEmpty()) {
            JOptionPane.showMessageDialog(null, "The field \"ID\" must not be empty!");
            return false;
        }
        else {
            try {
                Integer.parseInt(id);
                return true;
            }
            catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Enter the correct ID!");
                return false;
            }
        }
    }
    
    private ArrayList<Product> getProductsList() {
        /*** gets the table of products from the database, stores an instance
         * of each row in an ArrayList and returns the ArrayList.
        ***/
        
        // create an ArrayList that is going to keep products from the database.
        ArrayList<Product> productsList = new ArrayList<Product>();
        
        // get the database connection.
        Connection con = getConnection();
        
        try {
            // use the Statement object just to get data from the database.
            Statement st = con.createStatement();
            
            try {
                // execute the following query and store the result in a ResultSet instance.
                String query = "SELECT * FROM products";
                ResultSet rs = st.executeQuery(query);
                
                // go through the ResultSet instance.
                while (rs.next()) {
                    // store each row of the result set as a Product instance.
                    Product product = new Product(rs.getInt("id"), rs.getString("name"),
                            Float.parseFloat(rs.getString("price")), rs.getString("add_date"),
                            rs.getBytes("image"));
                    // add the instance of each row into the created ArrayList.
                    productsList.add(product);
                }
            }
            finally {
                // close the statement.
                try {st.close();} catch (SQLException ex) {}
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Some problems have appeared.");
        }
        finally {
            // close the database connection.
            try {con.close();} catch (SQLException ex) {}
        }
        
        return productsList;
    }
    
    private void showProductsList() {
        /*** The behavior of the function follows from the function name. ***/
        
        // get the ArrayList of products from the database.
        ArrayList<Product> productsList = getProductsList();
        // create a model of the table we will populate the data in.
        DefaultTableModel model = (DefaultTableModel) table_Products.getModel();
        // clear the jtable before we fill it.
        model.setRowCount(0);
        
        Object[] row = new Object[4];
        // go through the ArrayList of products and add its each element
        // to the model of the table as an array of Objects.
        for (int i = 0; i < productsList.size(); i++) {
            row[0] = productsList.get(i).getId();
            row[1] = productsList.get(i).getName();
            row[2] = productsList.get(i).getPrice();
            row[3] = productsList.get(i).getAddDate();
            
            model.addRow(row);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_ChooseImage;
    private javax.swing.JButton btn_ClearFields;
    private javax.swing.JButton btn_First;
    private javax.swing.JButton btn_Insert;
    private javax.swing.JButton btn_Last;
    private javax.swing.JButton btn_Next;
    private javax.swing.JButton btn_Previous;
    private javax.swing.JButton btn_RefreshTable;
    private javax.swing.JButton btn_Remove;
    private javax.swing.JButton btn_Update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_image;
    private javax.swing.JTable table_Products;
    private javax.swing.JTextField txt_addDate;
    private javax.swing.JTextField txt_id;
    private javax.swing.JTextField txt_name;
    private javax.swing.JTextField txt_price;
    // End of variables declaration//GEN-END:variables
}
